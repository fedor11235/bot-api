// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Promocode {
  id         Int      @default(autoincrement()) @id
  value      String?
  discount   Int?     @default(20)
  users_used User[]   @relation("used")
  owner      User     @relation(fields: [owner_id], references: [id])
  owner_id   String
}

model User {
  // id                   Int     @default(autoincrement()) @id
  id                    String      @id
  promocode_used        Promocode[] @relation("used")
  username              String?
  tariffPlan            String      @default("base")
  tariffPlan_temp       String?
  opt_into_temp         String?
  rec_into_temp         String?
  channel_temp          String?
  subscriptionEndDate   String      @default("never")
  createdOpt            Int         @default(0)
  byOpt                 Int         @default(0)
  totalSavings          Int         @default(0)
  invitedUsers          Int         @default(0)
  // созданно оптов на сумму
  totalEarned           Int         @default(0)
  promocode             Promocode[]
  opt_chanel_create     String?
  opt_into              OptInto[]
  RecommendationInto    RecommendationInto[]

  allow_suggestions     Boolean @default(false)   
  discount              Int     @default(0)
  //фильтр для категорий
  filter                String? @default("none")
  //фильтр для оптов
  filter_opt            String? @default("none")
  message_mode          String  @default("standart")
  opts                  Opt[]
  channels              UserChanel[]
  used_command_business Boolean @default(false)       

  chanel_edit_temp      String?
  post_id_temp          String?
  opt_type_temp         String?
}

model UserChanel {
  id       Int     @default(autoincrement()) @id
  idChanel String
  category String?
  username String?
  title String?
  // link: chanel.link,
  daily_reach Int?
  ci_index Int?
  participants_count Int?
  avg_post_reach Int?
  forwards_count Int?
  user           User?   @relation(fields: [idUser], references: [id])
  idUser         String?
}

model Catalog {
  id          Int     @default(autoincrement()) @id

  category String?
  username String?
  title String?

  link String?

  //количество подписчиков
  participants_count String?
  //охват
  coverage String?
  //цена рекламы
  advertising_price String?
  //рекомендации
  recommendations String?
  //контакты для связи
  communication String?
}

model OptInto {
  id             Int     @default(autoincrement()) @id
  booking_date   String  @default("")
  creatives      String  @default("")
  // allowed_dates  String  @default("")
  status         String  @default("created")
  type           String  @default("opt")
  user           User?   @relation(fields: [idUser], references: [id])
  idUser         String?
  opt            Opt?    @relation(fields: [chanel], references: [chanel])
  chanel         String?
  check          String?
  path_check     String?
  view                     Boolean  @default(true)
  posts                    Post[]
}

model Opt {
  chanel         String     @id
  title          String?
  link           String?  @unique()
  category       String?
  retail_price   String?
  wholesale_cost String?
  min_places     String?
  max_places     String?
  now_places     String? @default("0")
  booking_date   String  @default("")
  allowed_dates  String?
  deadline_date  String?
  placement_time String?
  requisites     String?
  status         String  @default("created")
  opt_into       OptInto[]
  user           User?   @relation(fields: [idUser], references: [id])
  idUser         String?
}

model RecommendationInto {
  id                       Int     @default(autoincrement()) @id
  chanel                   String?
  creatives                String  @default("")
  booking_date             String  @default("")
  booking_time             String  @default("")
  // allowed_dates            String  @default("")
  status                   String  @default("created")
  type                     String  @default("recommendation")
  user                     User?   @relation(fields: [idUser], references: [id])
  idUser                   String?
  recommendation           Recommendation?    @relation(fields: [username_recommendation], references: [username])
  username_recommendation  String?
  check                    String?
  path_check               String?
  check_mark               Boolean  @default(false)
  view                     Boolean  @default(true)
  posts                    Post[]
}

model Recommendation {
  id                 Int      @default(autoincrement()) @id
  username           String?  @unique()
  link               String?  @unique()
  title              String?
  price_standart     String?
  price_now          String?
  format             String?
  number_posts       Int?
  coverage           String? @default("?")
  subscribers        String? @default("?")
  // Выбор разрешенных мест
  placement_time     String?
  data_list          String?
  allowed_dates      String?
  requisites         String?
  deadline           String?
  info               String?
  view               Boolean @default(true)
  RecommendationInto RecommendationInto[]
}

model Post {
  id                     Int                 @default(autoincrement()) @id
  file_id                String?
  type                   String?
  recommendation_into    RecommendationInto? @relation(fields: [recommendation_into_id], references: [id])
  recommendation_into_id Int?
  recommendation_opt     OptInto?            @relation(fields: [opt_into_id], references: [id])
  opt_into_id            Int?
}


